@using EventEaseApp.Models
@code {
    [Parameter]
    public string EventName { get; set; } = "Sample Event";

    [Parameter]
    public DateTime EventDate { get; set; } = DateTime.Now.AddDays(7);

    [Parameter]
    public string EventLocation { get; set; } = "Sample Location";

    [Parameter]
    public string EventDescription { get; set; } = "Sample Description";

    [Parameter]
    public EventCallback<string> EventNameChanged { get; set; }

    [Parameter]
    public EventCallback<DateTime> EventDateChanged { get; set; }

    [Parameter]
    public EventCallback<string> EventLocationChanged { get; set; }

    [Parameter]
    public EventCallback<string> EventDescriptionChanged { get; set; }  

    [Parameter]
    public bool IsReadOnly { get; set; } = false;

    [Parameter] public string Color { get; set; } = "#007bff";
        [Parameter] public EventCallback<string> ColorChanged { get; set; }

    private async Task OnColorChanged(ChangeEventArgs e)
    {
        Color = e.Value?.ToString() ?? "#007bff";
        await ColorChanged.InvokeAsync(Color);
    }
    private List<string> ColorOptions = new() 
    { 
        "#007bff", // azul
        "#28a745", // verde
        "#dc3545", // rojo
        "#ffc107", // amarillo
        "#6f42c1"  // púrpura
    };

    private async Task SelectColor(string selected)
    {
        Color = selected;
        await ColorChanged.InvokeAsync(Color);
    }


    private async Task OnNameChanged(ChangeEventArgs e)
    {
        EventName = e.Value?.ToString() ?? string.Empty;
        await EventNameChanged.InvokeAsync(EventName);
    }

    private async Task OnDateChanged(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out var newDate))
        {
            EventDate = newDate;
            await EventDateChanged.InvokeAsync(EventDate);
        }
    }

    private async Task OnLocationChanged(ChangeEventArgs e)
    {
        EventLocation = e.Value?.ToString() ?? string.Empty;
        await EventLocationChanged.InvokeAsync(EventLocation);
    }

    private async Task OnDescriptionChanged(ChangeEventArgs e)
    {
        EventDescription = e.Value?.ToString() ?? string.Empty;
        await EventDescriptionChanged.InvokeAsync(EventDescription);
    }
    private string GetCardStyle()
    {
        return IsReadOnly ? $"background-color: {Color};" : "";
    }

}
<style>
    .event-card {
        background-color: @(IsReadOnly ? Color : "#6b6d85");
        border: 1px solid #dee2e6;
        border-radius: 1.55rem;
        padding: 1rem;
        margin-bottom: 1rem;
    }

    .event-card h3 {
        margin-top: 0;
        font-size: 1.5rem;
    }

    .event-card div {
        margin-bottom: 0.5rem;
    }

    .event-card label {
        font-weight: bold;
    }

    .event-card input {
        width: 100%;
        padding: 0.375rem 0.75rem;
        border-radius: 0.25rem;
        border: 1px solid #ced4da;
    }
    .color-options {
    display: flex;
    gap: 0.5rem;
    margin-top: 0.5rem;
    }

    .color-button {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        border: 2px solid transparent;
        cursor: pointer;
        transition: border 0.2s ease;
    }

    .color-button.selected {
        border: 2px solid white;
        box-shadow: 0 0 0 2px black;
    }
    .event-card input::placeholder {
    color: #bbb; /* gris pálido */
    opacity: 1; /* que no se vea semitransparente */
    }
    .event-card input:focus {
        border-color: #80bdff; /* azul claro */
        box-shadow: 0 0 0 0.2rem rgba(128, 189, 255, 0.25); /* sombra azul clara */
    }

</style>
<div class="event-card" style="@GetCardStyle()">

    <h3>Event Card</h3>

    @if (!IsReadOnly)
    {
        <div>
            <label>Name:</label>
            <input value="@EventName" placeholder="Event name..." @oninput="OnNameChanged" />
        </div>
        <div>
            <label>Date:</label>
            <input type="date" value="@EventDate.ToString("yyyy-MM-dd")" @oninput="OnDateChanged" />
        </div>
        <div>
            <label>Location:</label>
            <input value="@EventLocation" placeholder="Location..." @oninput="OnLocationChanged" />
        </div>
        <div>
            <label>Description:</label>
            <input value="@EventDescription" placeholder="Description..." @oninput="OnDescriptionChanged" />
        </div>
        <div>
            <label>Choose a color:</label>
            <div class="color-options">
        @foreach (var option in ColorOptions)
        {
            <button type="button"
                    class="color-button @(Color == option ? "selected" : "")"
                    style="background-color:@option"
                    @onclick="() => SelectColor(option)">
            </button>
        }
        </div>
</div>

        <div style="margin-top:1em;">
            <strong>Preview:</strong>
            <div>@EventName</div>
            <div>@EventDate.ToString("D")</div>
            <div>@EventLocation</div>
        </div>
    }
    else
    {
        <div><label>Name: </label>@EventName</div>
        <div><label>Date: </label>@EventDate.ToString("D")</div>
        <div><label>Location: </label>@EventLocation</div>
    }
</div>

